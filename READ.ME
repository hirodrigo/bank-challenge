# Card Decision Service

## Overview
The **Card Decision Service** is a Spring Boot application designed to evaluate customer eligibility for various types of credit cards based on specific conditions such as age, income, and state of residence.
The application uses a modular and extensible architecture to define and evaluate these conditions.

## Features
- **Card With Cashback**:
 - `cards.parameters.card-with-cashback.min-income`: Minimum income required for eligibility.
 - `cards.parameters.card-with-cashback.min-age`: Minimum age required for eligibility.

- **Card Without Annual Fee**:
 - `cards.parameters.card-without-annual-fee.min-income`: Minimum income required for eligibility.

- **Partner Card**:
 - `cards.parameters.partner-card.min-income`: Minimum income required for eligibility.
 - `cards.parameters.partner-card.min-age`: Minimum age required for eligibility.
 - `cards.parameters.partner-card.combination.allowed-states`: States where the card is allowed.
 - `cards.parameters.partner-card.combination.max-age`: Maximum age allowed for eligibility.

- **REST API**:
  - Maps customer requests to domain objects and provides responses with eligible cards or appropriate HTTP status codes.

## Technologies Used
- **Programming Language**: Kotlin
- **Framework**: Spring Boot
- **Build Tool**: Maven
- **Testing**: JUnit 5, Mockito

## How It Works
1. **Customer Request**: The application receives a customer request containing details like age, income, and state.
2. **Evaluation**: The request is processed through a series of evaluators to determine eligibility.
3. **Response**: A list of eligible cards is returned, or a `204 NO CONTENT` status is sent if no cards are available.

## Configuration
The application uses externalized configuration for card parameters:
- `cards.parameters.card-with-cashback.min-income`: Minimum income for cashback cards.
- `cards.parameters.card-with-cashback.min-age`: Minimum age for cashback cards.

## Running the Application
1. Clone the repository.
2. Configure the application properties in `application.properties`.
3. Build and run the application using Maven:
   ```bash
   mvn spring-boot:run
    ```